          FRAME 512
*CRC32
*08 SEP 1996
*DMM
*
* 0 = CRC32 - Fast 32 bit CRC generation for passed string. I think
*             this is the CRC used in PKZIP and Ethernet.
*
*             Invoked via Basic conversion processor. Use:
*
*              CRC = OCONV(STRING, 'U0200') - to return decimal CRC, or
*
*              CRC = ICONV(STRING, 'U0200') - to return 8 digit hex CRC
*
*             Eg: The string '123456789' returns CRC value 0xCBF43926
*************************************************************************
*
          EP !CRC32                    * Fast 32 bit CRC generator 
*
CHARH0    DEFC R0,H0                   * Redefine 'H0' as character
CHARH1    DEFC R0,H1                   * Redefine 'H1' as character
CHARH2    DEFC R0,H2                   * Redefine 'H2' as character
CHARH3    DEFC R0,H3                   * Redefine 'H3' as character
CHARH4    DEFC R0,H4                   * Redefine 'H4' as character
*
* Define lookup table for 32 bit CRC calculation
*
CRC32TBL  EQU *
          TEXT X'00000000',X'77073096',X'EE0E612C',X'990951BA',X'076DC419'
          TEXT X'706AF48F',X'E963A535',X'9E6495A3',X'0EDB8832',X'79DCB8A4'
          TEXT X'E0D5E91E',X'97D2D988',X'09B64C2B',X'7EB17CBD',X'E7B82D07'
          TEXT X'90BF1D91',X'1DB71064',X'6AB020F2',X'F3B97148',X'84BE41DE'
          TEXT X'1ADAD47D',X'6DDDE4EB',X'F4D4B551',X'83D385C7',X'136C9856'
          TEXT X'646BA8C0',X'FD62F97A',X'8A65C9EC',X'14015C4F',X'63066CD9'
          TEXT X'FA0F3D63',X'8D080DF5',X'3B6E20C8',X'4C69105E',X'D56041E4'
          TEXT X'A2677172',X'3C03E4D1',X'4B04D447',X'D20D85FD',X'A50AB56B'
          TEXT X'35B5A8FA',X'42B2986C',X'DBBBC9D6',X'ACBCF940',X'32D86CE3'
          TEXT X'45DF5C75',X'DCD60DCF',X'ABD13D59',X'26D930AC',X'51DE003A'
          TEXT X'C8D75180',X'BFD06116',X'21B4F4B5',X'56B3C423',X'CFBA9599'
          TEXT X'B8BDA50F',X'2802B89E',X'5F058808',X'C60CD9B2',X'B10BE924'
          TEXT X'2F6F7C87',X'58684C11',X'C1611DAB',X'B6662D3D',X'76DC4190'
          TEXT X'01DB7106',X'98D220BC',X'EFD5102A',X'71B18589',X'06B6B51F'
          TEXT X'9FBFE4A5',X'E8B8D433',X'7807C9A2',X'0F00F934',X'9609A88E'
          TEXT X'E10E9818',X'7F6A0DBB',X'086D3D2D',X'91646C97',X'E6635C01'
          TEXT X'6B6B51F4',X'1C6C6162',X'856530D8',X'F262004E',X'6C0695ED'
          TEXT X'1B01A57B',X'8208F4C1',X'F50FC457',X'65B0D9C6',X'12B7E950'
          TEXT X'8BBEB8EA',X'FCB9887C',X'62DD1DDF',X'15DA2D49',X'8CD37CF3'
          TEXT X'FBD44C65',X'4DB26158',X'3AB551CE',X'A3BC0074',X'D4BB30E2'
          TEXT X'4ADFA541',X'3DD895D7',X'A4D1C46D',X'D3D6F4FB',X'4369E96A'
          TEXT X'346ED9FC',X'AD678846',X'DA60B8D0',X'44042D73',X'33031DE5'
          TEXT X'AA0A4C5F',X'DD0D7CC9',X'5005713C',X'270241AA',X'BE0B1010'
          TEXT X'C90C2086',X'5768B525',X'206F85B3',X'B966D409',X'CE61E49F'
          TEXT X'5EDEF90E',X'29D9C998',X'B0D09822',X'C7D7A8B4',X'59B33D17'
          TEXT X'2EB40D81',X'B7BD5C3B',X'C0BA6CAD',X'EDB88320',X'9ABFB3B6'
          TEXT X'03B6E20C',X'74B1D29A',X'EAD54739',X'9DD277AF',X'04DB2615'
          TEXT X'73DC1683',X'E3630B12',X'94643B84',X'0D6D6A3E',X'7A6A5AA8'
          TEXT X'E40ECF0B',X'9309FF9D',X'0A00AE27',X'7D079EB1',X'F00F9344'
          TEXT X'8708A3D2',X'1E01F268',X'6906C2FE',X'F762575D',X'806567CB'
          TEXT X'196C3671',X'6E6B06E7',X'FED41B76',X'89D32BE0',X'10DA7A5A'
          TEXT X'67DD4ACC',X'F9B9DF6F',X'8EBEEFF9',X'17B7BE43',X'60B08ED5'
          TEXT X'D6D6A3E8',X'A1D1937E',X'38D8C2C4',X'4FDFF252',X'D1BB67F1'
          TEXT X'A6BC5767',X'3FB506DD',X'48B2364B',X'D80D2BDA',X'AF0A1B4C'
          TEXT X'36034AF6',X'41047A60',X'DF60EFC3',X'A867DF55',X'316E8EEF'
          TEXT X'4669BE79',X'CB61B38C',X'BC66831A',X'256FD2A0',X'5268E236'
          TEXT X'CC0C7795',X'BB0B4703',X'220216B9',X'5505262F',X'C5BA3BBE'
          TEXT X'B2BD0B28',X'2BB45A92',X'5CB36A04',X'C2D7FFA7',X'B5D0CF31'
          TEXT X'2CD99E8B',X'5BDEAE1D',X'9B64C2B0',X'EC63F226',X'756AA39C'
          TEXT X'026D930A',X'9C0906A9',X'EB0E363F',X'72076785',X'05005713'
          TEXT X'95BF4A82',X'E2B87A14',X'7BB12BAE',X'0CB61B38',X'92D28E9B'
          TEXT X'E5D5BE0D',X'7CDCEFB7',X'0BDBDF21',X'86D3D2D4',X'F1D4E242'
          TEXT X'68DDB3F8',X'1FDA836E',X'81BE16CD',X'F6B9265B',X'6FB077E1'
          TEXT X'18B74777',X'88085AE6',X'FF0F6A70',X'66063BCA',X'11010B5C'
          TEXT X'8F659EFF',X'F862AE69',X'616BFFD3',X'166CCF45',X'A00AE278'
          TEXT X'D70DD2EE',X'4E048354',X'3903B3C2',X'A7672661',X'D06016F7'
          TEXT X'4969474D',X'3E6E77DB',X'AED16A4A',X'D9D65ADC',X'40DF0B66'
          TEXT X'37D83BF0',X'A9BCAE53',X'DEBB9EC5',X'47B2CF7F',X'30B5FFE9'
          TEXT X'BDBDF21C',X'CABAC28A',X'53B39330',X'24B4A3A6',X'BAD03605'
          TEXT X'CDD70693',X'54DE5729',X'23D967BF',X'B3667A2E',X'C4614AB8'
          TEXT X'5D681B02',X'2A6F2B94',X'B40BBE37',X'C30C8EA1',X'5A05DF1B'
          TEXT X'2D02EF8D'
*
* ************************************************************** *
* ************************************************************** *
* 32 bit CRC generation. Invoked via Basic conversion processor. *
*                                                                *
* Element usage: D0, D1, TS, TSEND, R14, R15                     *
*                                                                *
* 'D0' used as the CRC accumulator, and 'T2' used as a scratch   * 
* area for determining the index value into the table. 'TS' is   *
* used to traverse the passed string.                            *
* ************************************************************** *
* ************************************************************** *
*
!CRC32    EQU *
          SRA R15,H0                   * Point 'R15' to low byte in 'D0'
          MOV TSBEG,TS                 * Use 'TS' to traverse passed str.
          MOV X'FFFFFFFF',D0           * Initialise the CRC accumulator
!LOOP     INC TS                       * Point 'TS' to next character
          ZERO T2                      * Initialise scratch tally!
          BCE TS,SM,!EXIT              * Jump if passed end-of-string
*
* Now we want to XOR the low byte of the accumulator (in 'H0')
* with the current data byte (character pointed to by 'TS')
*
          XOR TS,R15                   * Bit XOR char & low byte of 'D0'
          MCC TS,CHARH4                * put result into low byte of 'T2'
          INC T2,T2                    * Shift left to effect mul * 2
          INC T2,T2                    * Shift left again to effect mul * 4
*
* The resultant value now in 'T2' is used as an index into the lookup table
*
          SRA R14,CRC32TBL             * Point 'R14' at lookup table!
          INC R14,T2                   * Position 'R14' within the table!
*
* Now XOR the value from the table with contents of the CRC accumulator,
* after shifting the accumulator right 8 bits.
*
          MCC CHARH1,CHARH0            * shift 'H1' byte to 'H0'
          MCC CHARH2,CHARH1            * shift 'H2' byte to 'H1'
          MCC CHARH3,CHARH2            * shift 'H3' byte to 'H2'
          MCC R14,CHARH3               * Put high table byte into 'H3'
          DEC R15,2                    * Backup 'R15' to point to 'H2'
          INC R14                      * Inc 'R14' to 2nd byte in table
          XOR R15,R14                  * XOR byte from table into 'H2'
          INC R14                      * Inc 'R14' to 3nd byte in table
          INC R15                      * Inc 'R15' to point to 'H1'
          XOR R15,R14                  * XOR byte from table into 'H1'
          INC R14                      * Inc 'R14' to low byte in table
          INC R15                      * Bump up 'R15', now back on 'H0'!
          XOR R15,R14                  * XOR byte from table into 'H0'
          ZERO T2                      * Re-initialise scratch tally!
          B !LOOP                      * and repeat loop for next char!
*
* Convert CRC value into ASCII form, then place into 'TS' buffer for
* return. Before that we XOR 'D0' with 0xFFFFFFFF by converting to 1's
* complement format! That is, x = -(1+x)
*
!EXIT     EQU *
          INC D0                       * Increment accumulator by 1 then
          NEG D0                       * negate to get 'ones complement' 
          MOV TSBEG,TS                 * Reset the 'TS' buffer pointer
          BBS MBIT,!DOHEX              * Jump if we need to return hex
          MBD FP0,TS                   * return a +ve 32 bit CRC value!
          B !DONE                      * Go terminate string & exit
!DOHEX    MOV D0,D1                    * Clone return value into 'D1'
          MBXN 8,D1,TS                 * return a 8 digit hex value
!DONE     MCI SM,TS                    * terminate CRC value with 0xFF
          DEC TS                       * back up 'TS' from terminator
          MOV TS,TSEND                 * set 'TSEND = TS'
          ENT CONVEXIT                 * exit, all done!
*
*EOI
